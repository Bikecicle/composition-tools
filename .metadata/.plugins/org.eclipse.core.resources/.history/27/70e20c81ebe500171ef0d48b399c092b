package main;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import grain.Inflate;
import grain.RandomShift;
import grain.UniformShift;
import table.EdgeDetection;
import table.Power;

public class ScriptReader {

	private FractalSynth fractalSynth;
	private Scanner in;

	public ScriptReader(String script) {
		try {
			in = new Scanner(new File("scripts/" + script));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		fractalSynth = new FractalSynth();
		fractalSynth.openProject(script);
	}

	public ScriptReader() {
		Scanner userin = new Scanner(System.in);
		System.out.println("Script name:");
		String script = userin.nextLine();
		userin.close();
		try {
			in = new Scanner(new File("scripts/" + script));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		fractalSynth = new FractalSynth();
		fractalSynth.openProject(script);
	}

	public void execute() {
		String currentTable = null;
		boolean always = true;
		while (in.hasNext()) {
			String[] cmd = in.nextLine().split(" ");
			if (!cmd[0].equals("") && !cmd[0].startsWith("#")) {

				// Grain management
				if (cmd[0].equals("inflate")) {
					System.out.println("Resizing grains...");
					fractalSynth.applyMod(new Inflate(Double.parseDouble(cmd[1]), Double.parseDouble(cmd[2]),
							Double.parseDouble(cmd[3]), fractalSynth.getTable(cmd[4])));
				} else if (cmd[0].equals("rshift")) {
					System.out.println("Shifting grains...");
					fractalSynth.applyMod(new RandomShift(Double.parseDouble(cmd[1]), Double.parseDouble(cmd[2]),
							fractalSynth.getTable(cmd[3])));
				} else if (cmd[0].equals("reverb")) {
					// TODO
				} else if (cmd[0].equals("spatial")) {
					// TODO
				} else if (cmd[0].equals("ushift")) {
					fractalSynth.applyMod(new UniformShift(Double.parseDouble(cmd[1])));
				} else if (cmd[0].equals("pulsar")) {
					System.out.println("Generating pulsar matrix...");
					fractalSynth.genPulsarMatrix(Integer.parseInt(cmd[1]), Integer.parseInt(cmd[2]),
							Integer.parseInt(cmd[3]), Integer.parseInt(cmd[4]), Integer.parseInt(cmd[5]),
							Integer.parseInt(cmd[6]), Integer.parseInt(cmd[7]), Double.parseDouble(cmd[8]),
							Integer.parseInt(cmd[9]), cmd[10], cmd[11]);
				} else if (cmd[0].equals("layer")) {
					if (always && !fractalSynth.hasLayer()) {
					if (!fractalSynth.changeActiveLayer(cmd[1])) {
						fractalSynth.newLayer(cmd[1], Double.parseDouble(cmd[2]));
					}
				} else if (cmd[0].equals("render")) {
					fractalSynth.renderAll(cmd[1]);
				}

				// Table management
				else if (cmd[0].equals("table")) {
					if (always && !fractalSynth.hasTable(cmd[2])) {
						System.out.println("Generating new table...");
						if (cmd[1].equals("new")) {
							fractalSynth.addTable(cmd[2], Integer.parseInt(cmd[3]), Integer.parseInt(cmd[4]),
									Double.parseDouble(cmd[5]), Integer.parseInt(cmd[6]), Integer.parseInt(cmd[7]),
									Double.parseDouble(cmd[8]), Double.parseDouble(cmd[9]));
						} else if (cmd[1].equals("copy")) {
							fractalSynth.addTable(cmd[2], cmd[3]);
						}
					} else {
						skipAhead();
					}
					currentTable = cmd[2];
				} else if (cmd[0].equals("edge")) {
					System.out.println("Applying edge detection...");
					fractalSynth.filterTable(currentTable, new EdgeDetection(Integer.parseInt(cmd[1])));
				} else if (cmd[0].equals("power")) {
					System.out.println("Raising order...");
					fractalSynth.filterTable(currentTable, new Power(Double.parseDouble(cmd[1])));
				} else if (cmd[0].equals("invert")) {
					// TODO
				} else if (cmd[0].equals("plimit")) {
					// TODO
				} else if (cmd[0].equals("blur")) {
					// TODO
				}

				// Utility
				else if (cmd[0].equals("once")) {
					always = false;
				} else if (cmd[0].equals("always")) {
					always = true;
				}
			}
		}
	}

	private void prepare() {
		fractalSynth.clear();
	}

	private void skipAhead() {

	}

	public static void main(String[] args) {
		ScriptReader scriptReader;
		if (args.length == 1) {
			scriptReader = new ScriptReader(args[0]);
		} else {
			scriptReader = new ScriptReader();
		}
		scriptReader.prepare();
		scriptReader.execute();
	}

}
